generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model attendees {
  id         Int    @id @default(autoincrement())
  user_id    Int
  event_id   Int
  ticket_qty BigInt
  total_paid BigInt
  users      users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "attendees_fk1")
  events     events @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "attendees_fk2")
}

model events {
  id              Int            @id @default(autoincrement())
  organizer_id    Int
  event_picture   String         @db.VarChar(255)
  title           String         @db.VarChar(255)
  location        String         @db.VarChar(255)
  start_date      DateTime       @db.Date
  end_date        DateTime       @db.Date
  price           Int
  available_seats Int
  is_free         Boolean
  category        Category       @default(music)
  description     String         @default("Join us for an unforgettable night of music and entertainment.") @db.VarChar(255)
  about           String
  attendees       attendees[]
  users           users          @relation(fields: [organizer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "events_fk1")
  reviews         reviews[]
  tickets         tickets[]
  transactions    transactions[]
  vouchers        vouchers[]
}

model notifications {
  id             Int          @id @default(autoincrement())
  user_id        Int
  transaction_id Int
  message        String       @db.VarChar(255)
  users          users        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notifications_fk1")
  transactions   transactions @relation(fields: [transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notifications_fk2")
}

model referral_coupons {
  id            Int      @id @default(autoincrement())
  user_id       Int
  code          String   @db.VarChar(255)
  coupon_amount BigInt
  expires_date  DateTime @db.Date
  is_used       Boolean
  users         users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "referral_coupons_fk1")
}

model reviews {
  id       Int    @id @default(autoincrement())
  user_id  Int
  event_id Int
  rating   BigInt
  comment  String @db.VarChar(255)
  users    users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_fk1")
  events   events @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_fk2")
}

model tickets {
  id           Int            @id @default(autoincrement())
  code         BigInt         @unique
  event_id     Int
  price        BigInt
  quota        BigInt
  events       events         @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tickets_fk2")
  transactions transactions[]
}

model transactions {
  id            Int             @id @default(autoincrement())
  user_id       Int
  event_id      Int
  ticket_id     Int
  total_price   BigInt
  payment_proof String          @db.VarChar(255)
  status        String          @db.VarChar(255)
  expired_date  DateTime        @db.Date
  notifications notifications[]
  users         users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transactions_fk1")
  events        events          @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transactions_fk2")
  tickets       tickets         @relation(fields: [ticket_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transactions_fk3")
}

model users {
  id               Int                @id @default(autoincrement())
  first_name       String             @db.VarChar(255)
  last_name        String             @db.VarChar(255)
  profile_picture  String?            @db.VarChar(255)
  email            String             @unique @db.VarChar(255)
  password         String             @db.VarChar(255)
  role             String             @default("user") @db.VarChar(255)
  referral_code    String?            @db.VarChar(255)
  refered_by       String?            @db.VarChar(255)
  points           BigInt?
  is_verified      Boolean            @default(false)
  attendees        attendees[]
  events           events[]
  notifications    notifications[]
  referral_coupons referral_coupons[]
  reviews          reviews[]
  transactions     transactions[]
}

model vouchers {
  id          Int      @id @default(autoincrement())
  event_id    Int
  code        BigInt
  disc_amount BigInt
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  quota       BigInt
  events      events   @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vouchers_fk1")
}

enum Category {
  music
  tecnology
  culinary
  arts
  sports
  education
}
